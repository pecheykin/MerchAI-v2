"""
MerchAI v2 - –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
YOLO8 Object Detection + ResNet18 Classification + Business Logic
"""

import os
import uuid
import torch
from PIL import Image, ImageDraw
from ultralytics import YOLO
from typing import List, Dict, Tuple, Optional
from collections import Counter
import json
from datetime import datetime

class ShelfAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–ª–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞ - YOLO + ResNet18 + –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞"""
    
    def __init__(self, classifier_model=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        classifier_model - –Ω–∞—à–∞ –æ–±—É—á–µ–Ω–Ω–∞—è ResNet18 –º–æ–¥–µ–ª—å
        """
        self.classifier = classifier_model
        self.yolo_model = None
        self.temp_dir = "temp_shelf_analysis"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.makedirs(self.temp_dir, exist_ok=True)
        
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ShelfAnalyzer...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º YOLO –º–æ–¥–µ–ª—å
        try:
            self.yolo_model = YOLO('yolov8n.pt')  # Nano –≤–µ—Ä—Å–∏—è - –±—ã—Å—Ç—Ä–∞—è
            print("‚úÖ YOLOv8 –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YOLO: {e}")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ultralytics")
    
    def detect_objects_on_shelf(self, image_path: str, confidence_threshold: float = 0.3) -> List[Dict]:
        """
        –î–µ—Ç–µ–∫—Ü–∏—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø–æ–ª–∫–µ —á–µ—Ä–µ–∑ YOLOv8
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        """
        if self.yolo_model is None:
            raise Exception("YOLO –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–∫—É: {image_path}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
        results = self.yolo_model(image_path, conf=confidence_threshold)
        detections = results[0].boxes
        
        if detections is None or len(detections) == 0:
            print("‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–∞ –ø–æ–ª–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        objects_found = []
        for i, box in enumerate(detections):
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bounding box
            x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
            confidence = float(box.conf[0].cpu().numpy())
            class_id = int(box.cls[0].cpu().numpy())
            
            # YOLO –∫–ª–∞—Å—Å—ã (–Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç bottle=39, cup=41, bowl=51)
            yolo_classes = {39: 'bottle', 41: 'cup', 51: 'bowl', 0: 'person'}
            object_type = yolo_classes.get(class_id, f'object_{class_id}')
            
            objects_found.append({
                'bbox': [int(x1), int(y1), int(x2), int(y2)],
                'confidence': confidence,
                'class_id': class_id,
                'object_type': object_type,
                'crop_id': f'crop_{i}'
            })
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø–æ–ª–∫–µ: {len(objects_found)}")
        return objects_found
    
    def crop_and_classify_objects(self, shelf_image_path: str, objects: List[Dict]) -> List[Dict]:
        """
        –í—ã—Ä–µ–∑–∞–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ResNet18
        """
        if self.classifier is None:
            raise Exception("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä (ResNet18) –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print("‚úÇÔ∏è –í—ã—Ä–µ–∑–∞–µ–º –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã...")
        
        shelf_image = Image.open(shelf_image_path)
        classified_objects = []
        
        for i, obj in enumerate(objects):
            bbox = obj['bbox']
            x1, y1, x2, y2 = bbox
            
            # –í—ã—Ä–µ–∑–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º
            padding = 10
            crop_box = (
                max(0, x1 - padding),
                max(0, y1 - padding), 
                min(shelf_image.width, x2 + padding),
                min(shelf_image.height, y2 + padding)
            )
            
            cropped = shelf_image.crop(crop_box)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
            crop_filename = f"crop_{i}_{uuid.uuid4().hex[:8]}.jpg"
            crop_path = os.path.join(self.temp_dir, crop_filename)
            cropped.save(crop_path, 'JPEG')
            
            try:
                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ResNet18
                classification_result = self.classifier.predict_image(crop_path, top_k=1)
                
                if (classification_result["status"] == "success" and 
                    classification_result["results"] and 
                    len(classification_result["results"]) > 0):
                    
                    result = classification_result["results"][0]
                    product_name = result["product"]
                    classification_confidence = result["confidence"]
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ YOLO + ResNet18
                    classified_objects.append({
                        **obj,  # –î–∞–Ω–Ω—ã–µ –æ—Ç YOLO
                        'product_name': product_name,
                        'classification_confidence': classification_confidence,
                        'crop_path': crop_path,
                        'detected': classification_confidence >= self.classifier.confidence_threshold
                    })
                    
                    print(f"üì¶ –û–±—ä–µ–∫—Ç {i+1}: {product_name} ({classification_confidence:.1f}%)")
                else:
                    classified_objects.append({
                        **obj,
                        'product_name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
                        'classification_confidence': 0.0,
                        'crop_path': crop_path,
                        'detected': False
                    })
                    print(f"‚ùì –û–±—ä–µ–∫—Ç {i+1}: –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ {i+1}: {e}")
                classified_objects.append({
                    **obj,
                    'product_name': '–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                    'classification_confidence': 0.0,
                    'crop_path': crop_path,
                    'detected': False
                })
        
        return classified_objects
    
    def calculate_shelf_statistics(self, classified_objects: List[Dict]) -> Dict:
        """
        –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª–∫–µ
        """
        print("üìä –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª–∫–∏...")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        recognized_products = [
            obj for obj in classified_objects 
            if obj['detected'] and obj['product_name'] != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'
        ]
        
        if len(recognized_products) == 0:
            return {
                "total_detected": len(classified_objects),
                "total_recognized": 0,
                "products": [],
                "message": "–ù–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é"
            }
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        product_names = [obj['product_name'] for obj in recognized_products]
        product_counts = Counter(product_names)
        total_recognized = len(recognized_products)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        products_stats = []
        for product, count in product_counts.most_common():
            percentage = (count / total_recognized) * 100
            products_stats.append({
                'name': product,
                'count': count,
                'percentage': round(percentage, 1)
            })
        
        return {
            "total_detected": len(classified_objects),
            "total_recognized": total_recognized,
            "recognition_rate": round((total_recognized / len(classified_objects)) * 100, 1),
            "products": products_stats
        }
    
    def generate_business_recommendations(self, stats: Dict, target_brands: List[str] = None, target_percentage: float = 51.0) -> Dict:
        """
        –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è
        """
        if target_brands is None:
            target_brands = ['ruz', '—Ä—É–∑']  # –ù–∞—à–∏ –±—Ä–µ–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        recommendations = {}
        
        if len(stats["products"]) == 0:
            return {"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        total_recognized = stats["total_recognized"]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ü–µ–ª–µ–≤–æ–π –±—Ä–µ–Ω–¥
        for brand in target_brands:
            brand_lower = brand.lower()
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –Ω–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞
            brand_products = [
                p for p in stats["products"]
                if brand_lower in p["name"].lower()
            ]
            
            if not brand_products:
                recommendations[f"{brand}_analysis"] = {
                    "status": "–¢–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –ø–æ–ª–∫–µ",
                    "current_count": 0,
                    "current_percentage": 0.0,
                    "action": f"–ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã {brand} –Ω–∞ –ø–æ–ª–∫—É!"
                }
                continue
            
            # –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞
            brand_total_count = sum(p["count"] for p in brand_products)
            brand_percentage = sum(p["percentage"] for p in brand_products)
            
            # –†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if brand_percentage >= target_percentage:
                action = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–æ–ª—è {brand} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {brand_percentage:.1f}%"
                need_add = 0
            else:
                # –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –¥–æ–ª–∏
                target_count = int((total_recognized * target_percentage / 100)) + 1
                current_other = total_recognized - brand_total_count
                
                # –ù–æ–≤–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
                need_add = max(1, target_count - brand_total_count)
                new_total = total_recognized + need_add
                new_brand_percentage = ((brand_total_count + need_add) / new_total) * 100
                
                action = f"üìà –î–æ–±–∞–≤–∏—Ç—å {need_add} —Ç–æ–≤–∞—Ä–æ–≤ {brand} –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è {target_percentage}%"
            
            recommendations[f"{brand}_analysis"] = {
                "brand": brand,
                "current_count": brand_total_count,
                "current_percentage": round(brand_percentage, 1),
                "target_percentage": target_percentage,
                "need_add": need_add,
                "action": action,
                "products_on_shelf": [p["name"] for p in brand_products]
            }
        
        return recommendations
    
    def create_annotated_image(self, shelf_image_path: str, classified_objects: List[Dict], output_path: str = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ (bounding boxes + –ø–æ–¥–ø–∏—Å–∏)
        """
        if output_path is None:
            output_path = os.path.join(self.temp_dir, f"annotated_shelf_{uuid.uuid4().hex[:8]}.jpg")
        
        image = Image.open(shelf_image_path)
        draw = ImageDraw.Draw(image)
        
        for obj in classified_objects:
            bbox = obj['bbox']
            x1, y1, x2, y2 = bbox
            
            # –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏
            if obj['detected']:
                color = 'green'
                text = f"{obj['product_name']} ({obj['classification_confidence']:.0f}%)"
            else:
                color = 'red'
                text = "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
            
            # –†–∏—Å—É–µ–º bounding box
            draw.rectangle([x1, y1, x2, y2], outline=color, width=3)
            
            # –ü–æ–¥–ø–∏—Å—å
            text_bbox = draw.textbbox((x1, y1-20), text)
            draw.rectangle([text_bbox[0]-2, text_bbox[1]-2, text_bbox[2]+2, text_bbox[3]+2], 
                         fill=color, outline=color)
            draw.text((x1, y1-20), text, fill='white')
        
        image.save(output_path, 'JPEG')
        print(f"üñºÔ∏è –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
        return output_path
    
    def analyze_shelf_complete(self, shelf_image_path: str, 
                             target_brands: List[str] = None,
                             target_percentage: float = 51.0,
                             save_annotated: bool = True) -> Dict:
        """
        –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–ö–ò: –¥–µ—Ç–µ–∫—Ü–∏—è ‚Üí –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Üí —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Üí —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        analysis_start_time = datetime.now()
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–∫–∏: {shelf_image_path}")
        
        try:
            # –®–ê–ì 1: –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ YOLO
            objects = self.detect_objects_on_shelf(shelf_image_path)
            if len(objects) == 0:
                return {
                    "status": "error",
                    "message": "–ù–∞ –ø–æ–ª–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                }
            
            # –®–ê–ì 2: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ ResNet18
            classified_objects = self.crop_and_classify_objects(shelf_image_path, objects)
            
            # –®–ê–ì 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = self.calculate_shelf_statistics(classified_objects)
            
            # –®–ê–ì 4: –ë–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self.generate_business_recommendations(stats, target_brands, target_percentage)
            
            # –®–ê–ì 5: –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            annotated_image_path = None
            if save_annotated:
                annotated_image_path = self.create_annotated_image(shelf_image_path, classified_objects)
            
            # –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_time = (datetime.now() - analysis_start_time).total_seconds()
            
            result = {
                "status": "success",
                "analysis_timestamp": analysis_start_time.isoformat(),
                "analysis_time_seconds": round(analysis_time, 2),
                "detection_summary": {
                    "total_objects_detected": len(objects),
                    "objects_recognized": stats["total_recognized"],
                    "recognition_rate_percent": stats.get("recognition_rate", 0)
                },
                "shelf_statistics": stats,
                "business_recommendations": recommendations,
                "annotated_image": annotated_image_path,
                "detailed_objects": classified_objects  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            }
            
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.1f}—Å")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(objects)} –æ–±—ä–µ–∫—Ç–æ–≤, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {stats['total_recognized']}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–∫–∏: {e}")
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                "analysis_timestamp": analysis_start_time.isoformat()
            }
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            self.cleanup_temp_files()
    
    def cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            for filename in os.listdir(self.temp_dir):
                if filename.startswith('crop_'):
                    file_path = os.path.join(self.temp_dir, filename)
                    os.remove(file_path)
            print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å FastAPI
def create_shelf_analyzer_with_model(ml_model):
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –Ω–∞—à–µ–π ML –º–æ–¥–µ–ª—å—é
    """
    return ShelfAnalyzer(classifier_model=ml_model)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω—É–∂–Ω–∞ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
    try:
        from pytorch_model import ml_model
        
        analyzer = ShelfAnalyzer(classifier_model=ml_model)
        
        # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞
        test_image = "test_shelf.jpg"  # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–æ—Ç–æ –ø–æ–ª–∫–∏
        
        if os.path.exists(test_image):
            result = analyzer.analyze_shelf_complete(
                shelf_image_path=test_image,
                target_brands=['ruz', 'pepsi'],
                target_percentage=51.0
            )
            
            print("\n" + "="*50)
            print("–†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê –ü–û–õ–ö–ò:")
            print("="*50)
            print(json.dumps(result, ensure_ascii=False, indent=2))
        else:
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {test_image} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except ImportError:
        print("‚ö†Ô∏è ML –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")